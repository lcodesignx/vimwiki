== Understanding Directory Structure Best Practices ==

    *Organizing Ansible Contents*
    
    * When working with Ansible, it's recommended to use project directories so 
      that contents can be organized in a consistent way
    * Each project directory may have its own ansible.cfg, inventory as well as 
      playbooks
    * If the directory grows bigger, variable files and other include files may 
      be used
    * And finally, roles can be used to standarize and easily re-use specific 
      parts of Ansible
    * For now, consider a role a complete project dedicated to a specific task 
      that is going to be included in the main playbook

    *Directory Layout Best Practices*
    
    * Ansible Documentation describes best practices:
        * https://docs.ansible.com/ansible/latest/user_guide/playbooks_best_practices.html
    * Some highlights:
        * On top in the directory, use site.yml as the master playbook
        * From site.yml, call speecific playbooks for specific types of host 
          (webservers.yml, dbservers.yml, etc.)
        * Consider using different inventory files to differentiate between 
          production and staging phases
        * Use `group_vars/` and `hosts_vars/` to set host related variables
        * Use roles to standarize common tasks

== Understanding Ansible Roles ==

    *Understanding Roles*
    
    * Ansible Playbooks can be very similar: code used in one playbook can be 
      useful in other playbooks also
    * To make it easy to re-use code, roles can be used. A role is a collection 
      of tasks, variables, files, templates and other resources in a fixed directory 
      structure that, as such, can easily be included from a playbook
    * Roles should be written in a generic way, such that play specifics can be 
      defined as variables in the play, and overwrite the default variables that 
      should be set in the role
    * Using Roles makes working with large projects more manageable

    *Understanding Roles Default Structure*
    
    * `defaults` contains default values of role variables. If variables are set 
      at the play level as well, these default values are overwritten
    * `files` may contain statif files that are needed from the role tasks
    * `handlers` has a main.yml that defines handlers used in the role
    * `meta` has a main.yml that may be used to include role metadata, such as 
      information about author, license, dependencies and more
    * `tasks` contains a main.yml that defines the role stask definitions
    * `templates` is used to store Jinja2 templates
    * `tests` may contain an optional inventory file, as well as a test.yml 
      playbook that can be used to test the role
    * `vars` may contain a main.yml with standard variables for the role (which are 
      not meant to be overwritten by playbook variables)

    *Understanding Role Variables*
    
    * Variables can be dfined at differentl levels in a role
    * `vars/main.yml` has the role default variables, which are used in default 
      role functioning. They are not intended to be overwritten
    * `defaults/main.yml` can contain default variables. These have a low precedence 
      and can be overwritten by variables with the same name that are set in the 
      playbook and which have higher precedence
    * Playbook variables will always overwrited the variables as set in the role. 
      Site-specific variables such as secrets and vault envrypted data should 
      always be managed from the playbook, as role variables are intended to be 
      generic
    * Role variables are defined in the playbook when calling the role and they 
      have the highest precedence and overwrite playbook variables as well as 
      inventory variables

    *Understanding Role Location*
    
    * Roles can be obtained in many ways:
        * Write your own roles
        * For Red Hat Enterprise Linux, the rhel-system-roles package is available
        * The community provides role through the Ansible Galaxy website
    * Roles can be stored at a default location, and from there can easily be used 
      from playbooks:
        * `./roles` has highes precedence
        * `~/.ansible/roles` is checked after that
        * `/etc/ansible/roles` is checked next
        * `/usr/share/ansible/roles` is checked last

    *Using Roles in a Playbook*
    
    * Roles are referred to from playbooks
    * When roles are used, they will run before any task that is defined in the 
      playbook
      
      `---`
      `- name: role demo`
        `hosts: all`
        `roles:`
          `- role1`
          `- role2`

    *Defining Role Variables*
    
    * When calling a role, role variables can be defined

      `---`
      `- name: role demo`
        `hosts: all`
        `roles:`
          `- role1`
          `- role2`
            `var1: cow`
            `var2: goat`

== Using Ansible Galaxy for Standard Roles ==

    *Using Ansible Galaxy*
    
    * Administrators can define their own roles, or standard roles can be used 
      from Ansible Galaxy
    * Ansible Galaxy is a public website where community provided roles are 
      offered
    * Before writing your own roles, check Galaxy, you may get the roles from 
      there
    * An easy-to-use search interface is available at https://galaxy.ansible.com
