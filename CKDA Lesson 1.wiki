== Understanding Container Components ==
 
* *Images* are read-only environments that contain the runtime environment which includes the 
  application and libraries it requires
 
* *Registries* are used to store images. Docker hub is common registry, but private registries
  can be created also
 
* *Containers* are the isolates runtime environments where the application is running. By using 
  namespaces the containers can be offered as a strictly isolated environment

== Managing Containers ==

* `docker ps` will show the IDs of containers
* `docker inspect <ID> | less`
* `docker inspect --format='{{.NetworkSettings.IPAddress}}' containername`
* `docker inspect --format='{{.State.Pid}}' containername`
* Alternatively, use `ps aux` on the host to find the container PID

== Managing Container Images ==

Roughly, there are two approaches to creating an image

* Using a runnign container: a container is started and modifications are applied to the container. 
  From the container, `docker` commands are used to write modifications
  
* Using a Dockerfile: a Dockerfile contains instructions for building an image. Each instruction 
  adds a new layer to the image, which offers more control over the files that are added to an 
  image at a later stage

*Using Dockerfile*

* Dockerfile is a way to automate container builds
 
* It contains all instructions required to build a container image
 
* So instead of distributing images, you could just distribute the Dockerfile
 
* Use `docker build .` to build the container image based on the Dockerfile in the current 
  directory
 
* Images will be stored on your local system, but you can direct the image to be stored in a 
  repository

== Understanding Container Logging ==

* Logs by default are written to the container
 
* Use `docker run -rm -v /dev/log:/dev/log/fedora:latest logger "message from container"` to 
  capture container logs in the host operating system
 
* Type `journalctl | grep container` to see this test log message on the container host
